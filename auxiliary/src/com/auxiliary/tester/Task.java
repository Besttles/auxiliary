package com.auxiliary.tester;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.RecursiveAction;import java.util.concurrent.TimeUnit;public class Task extends RecursiveAction {    private static final long serialVersionUID = 1L;    private List<Product> products;    private int first;    private int last;    private double increment;    public Task(List<Product> products, int first, int last, double increment) {        super();        this.products = products;        this.first = first;        this.last = last;        this.increment = increment;    }    @Override    protected void compute() {        if(last - first<10) {            updatePrices();        }else {            int middle = (last + first)/2;            System.out.printf("task:pading task %s\n", getQueuedTaskCount());            Task t1 = new Task(products,first,middle,increment);            Task t2 = new Task(products,middle+1,last,increment);            invokeAll(t1,t2);        }    }    private void updatePrices() {        for(int i = first; i<last;i++) {            Product product = products.get(i);            product.setPrice(product.getPrice()*(1+increment));        }    }    public static void main(String[] args) {        ProductListGenerator generator = new ProductListGenerator();        List<Product> products = generator.generator(10000);        Task task = new Task(products, 0, products.size(), 0.2);        long time1 = new Date().getTime();        ForkJoinPool forkJoinPool = new ForkJoinPool();        forkJoinPool.execute(task);        do {            System.out.printf("mainThread: ThreadCount: %d \n", forkJoinPool.getActiveThreadCount());            System.out.printf("main:stealCount: %d \n",forkJoinPool.getStealCount());            System.out.printf("mian:parallesime:%d \n", forkJoinPool.getParallelism());            try {                TimeUnit.MILLISECONDS.sleep(5);            } catch (Exception e) {                e.printStackTrace();            }        } while (!task.isDone());        forkJoinPool.shutdown();//        task.updatePrices();        long time2 = new Date().getTime();        System.out.println(time2 - time1);        if(task.isCompletedNormally()) {            System.out.println("the task is completlly normal");        }        for(int i = 0;i<products.size();i++) {            Product product = products.get(i);            if(product.getPrice() != 12) {                //System.out.printf("product : %s %f \n",product.getName(),product.getPrice());            }        }        System.out.println("the end of the task!");    }}class Product {    private String name;    private double price;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public double getPrice() {        return price;    }    public void setPrice(double price) {        this.price = price;    }}class ProductListGenerator {    public List<Product> generator(int size){        List<Product> ret = new ArrayList<Product>();        for(int i=0 ; i<size ; i++) {            Product product = new Product();            product.setName("product"+i);            product.setPrice(10);            ret.add(product);        }        return ret;    }}