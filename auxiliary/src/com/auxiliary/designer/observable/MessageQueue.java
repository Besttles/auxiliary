package com.auxiliary.designer.observable;import java.util.ArrayList;import java.util.List;import java.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.locks.ReentrantLock;//自定义监听队列public abstract class MessageQueue {    LinkedBlockingQueue queue = new LinkedBlockingQueue();    List<Observers> observerslist = new ArrayList<>();    private static int WEIGHT = 0;    boolean run = false;    public MessageQueue() {        new Thread(() -> {            doChange();        }).start();    }    private static ReentrantLock lock = new ReentrantLock();    public void addObserver(Observers e){        observerslist.add(e);    }    void notifyObservers(Object o) {        lock.lock();        queue.offer(o);        lock.unlock();    }    public void deleteObserver(Observers observers){        observerslist.remove(observers);    }    void doChange(){        for (;;){            if (!queue.isEmpty()){                Object o =  queue.poll();                    for (Observers obs: observerslist) {                        try {                            obs.update(o);                        }catch (Exception e){                            e.printStackTrace();                        }                    }            }        }    }}